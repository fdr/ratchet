#!/usr/bin/env python3
import argparse
import collections
import datetime
import os
import re
import signal
import subprocess
import sys
import time


def port_to_pid(port):
    """
    Maps a port being listened upon to a PID

    This is useful to stop the root process of network servers.  Left
    untreated is the case of multiple bindings to the same port on
    different interfaces: multiple matches will result in an
    exception.
    """

    p = subprocess.Popen(
        ['lsof', '-P', '-n', '-i',
         'TCP:' + str(port), '-s', 'TCP:LISTEN', '-Fp'],
        stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    stdout, stderr = p.communicate()

    if p.wait() != 0:
        return None
    else:
        stdout_str = stdout.decode('utf-8') if isinstance(stdout, bytes) else stdout
        m = re.match(r'^p(?P<pid>\d+)$', stdout_str)

        if m:
            return int(m.groupdict()['pid'])
        else:
            raise Exception('pid-to-port returns normally but has '
                            'incomprehensible output: {0}'.format(stdout_str))

    raise AssertionError('Unintended branch fallthrough')


class OSProcess(collections.namedtuple(
        'OSProcess', ['pid', 'argv'])):

    def is_immune(self):
        def contains(s):
            return self.argv.find(s) >= 0

        is_postmaster = contains('-D') and contains('config_file=')

        # Don't throttle the archiver; its progress is how the
        # situation is freed up.
        is_archiver = contains('archiver')

        # Don't throttle the log collector: that has been observed to
        # cause the archiver to have problems running since it sends
        # its logs to stderr, absorbed by the same.
        is_logcollector = contains('logger')

        # Don't throttle checkpoints, either user triggered or the
        # 'checkpointer' in 9.2+.  Checkpoints is a time when Postgres
        # opts to look at deleting WAL off the disk, so it's desirable
        # these continue to happen.
        is_checkpoint_action = contains('checkpoint')

        # Don't throttle the bgwriter or wal writer
        # (counter-intuitively)
        #
        # This is so checkpoints can be successfully processed.  As
        # the other processes in the system generating WAL will be
        # heavily throttled, it seems okay to let these remain so
        # checkpoints can happen.
        is_wal_writer_or_bgwriter = contains('writer')

        return any([
                   is_postmaster,
                   is_archiver,
                   is_logcollector,
                   is_checkpoint_action,
                   is_wal_writer_or_bgwriter,
                   ])


def pid_children(root_pid):
    """
    Given a pid, return a list of the child OSProcess-es.

    This is not recursive.  The argv is returned so that the Postgres
    Archiver process can be spared from throttling by using string
    matching to identify it.

    Raises an exception if the pid could not be found.
    """
    p = subprocess.Popen(['ps', '--ppid=' + str(root_pid), '-o', 'pid=,args='],
                         stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    stdout, stderr = p.communicate()

    if p.wait() != 0:
        stderr_str = stderr.decode('utf-8') if isinstance(stderr, bytes) else stderr
        if stderr_str == '':
            # ps likes to return 1 when no processes are returned.  It
            # makes no exit-code differentiation between 'erroneous
            # user input', 'no pid', or 'no children of pid', so don't
            # even bother trying.
            return []
        else:
            raise Exception('process listing did not complete successfully: ' +
                            stderr_str)

    stdout_str = stdout.decode('utf-8') if isinstance(stdout, bytes) else stdout
    parts = [line.strip().split(' ', 1)
             for line in stdout_str.strip().split('\n')]

    return [OSProcess(pid=int(pid), argv=argv) for (pid, argv) in parts]


def force_naptime(parent_pid, nap_quantum):
    """
    Put a parent and its child processes to sleep for a while

    This function is intended to be called repeatedly to cause a
    degradation in performance, as each naptime is relatively small.

    """
    SIGSTOP = signal.SIGSTOP
    parent_pid = int(parent_pid)

    # Record stopped processes before actually sending the signal;
    # since spurious SIGCONTs are mostly harmless but dangling
    # SIGSTOPs are dangerous, optimize for sending SIGCONT even if
    # there is no preceding SIGSTOP in error cases.
    children_maybe_stopped = set()

    def stop_pid_and_record(pid):
        children_maybe_stopped.add(pid)
        os.kill(pid, SIGSTOP)

    try:
        # Stop the parent first, so it cannot create children.
        os.kill(parent_pid, SIGSTOP)

        children = pid_children(parent_pid)

        # Send SIGSTOP to children, unless they are deemed immune from
        # the need to be ratcheted.
        for osp in children:
            if osp.is_immune():
                continue

            stop_pid_and_record(osp.pid)

        # Wait around a while while everyone is taking a nap
        time.sleep(nap_quantum)
    finally:
        force_wake(parent_pid)


def force_wake(parent_pid):
    """
    A paranoid, unconditional wake-up call

    Should be called after throttling is complete, in case this
    program was termianted by an OOM killer or even just sketchy OOM
    handling by Python.
    """
    for pid in [parent_pid] + [osp.pid for osp in pid_children(parent_pid)]:
        try:
            os.kill(pid, signal.SIGCONT)
        except Exception:
            # Stop at nothing and soldier on, including processes that
            # may disappear for whatever reason (kernel or concurrent
            # user shenanigans, such as kill -9 by an operator)
            pass


def nap_until(parent_pid, deadline, nap_quantum, wake_quantum):
    """
    Cause continuous napping until some future datetime.

    """
    while datetime.datetime.now() < deadline:
        force_naptime(parent_pid, nap_quantum)
        time.sleep(wake_quantum)


def self_test():
    """
    Quick and dirty self-test

    Exercises some code paths without much tooling.
    """
    import socket

    print('Beginning self test...')

    print('  Testing un-limited speed of a process; for comparison')

    TEST_ADDR = ('0.0.0.0', 12341)

    def fork_burner(title):
        deadline = datetime.datetime.now() + datetime.timedelta(seconds=5)
        pid = os.fork()
        if pid == 0:
            # Have a soon-zombie child process to exercise some other
            # code paths.
            if os.fork() == 0:
                sys.exit(0)

            # In this flow of control: in the victim/child process

            # Listen on a socket to test the port-to-pid resolution.
            # Vestigial in tests that do not support it, and
            # cleared/freed by exiting the entire process.
            s = socket.socket()
            s.bind(TEST_ADDR)
            s.listen(0)

            i = 0
            while datetime.datetime.now() < deadline:
                i += 1

            print('{0}: counted {1} times'.format(title, i))
            sys.exit(0)
        else:
            return int(pid)

    pid = fork_burner('Unthrottled process')
    os.waitpid(pid, 0)

    print('  Testing throttled process; it should loop fewer times')

    # Deadline comes somewhat safely before the process finishes
    napper_deadline = datetime.datetime.now() + datetime.timedelta(seconds=4)

    pid = fork_burner('Throttled process')
    nap_until(pid, napper_deadline, 0.5, 0.1)
    os.waitpid(pid, 0)

    print('  Testing unconditional wake; should terminate')
    pid = fork_burner('Paused process')
    os.kill(pid, signal.SIGSTOP)
    force_wake(pid)
    os.waitpid(pid, 0)
    print('  Woken.')

    print('  Test port-pid resolution')
    pid = fork_burner('Process just to bind a port')
    found_pid = port_to_pid(TEST_ADDR[1])
    if found_pid != pid:
        raise Exception('Mismatch: created pid was {0}, '
                        'but resolved the pid {1}'.format(pid, found_pid))
    else:
        print('  ...resolved properly')

    os.kill(pid, signal.SIGTERM)

    print('Done.')


def main():
    parser = argparse.ArgumentParser(
        description=('Continuously send SIGSTOP and SIGCONT to '
                     'throttle process activity'))

    subparsers = parser.add_subparsers(title='actions', dest='action', required=True)

    # Parent parser for PID-or-Port options that is seen in multiple
    # commands.
    portpid_parent = argparse.ArgumentParser(add_help=False)
    group = portpid_parent.add_mutually_exclusive_group(required=True)
    group.add_argument('--pid', type=int, help='parent process id to apply to')
    group.add_argument('--port', type=int, help='bound port to find pid for')

    # Wake action
    subparsers.add_parser('wake', parents=[portpid_parent],
                          help='wake up a process and its children')

    # Nap action
    nap_action = subparsers.add_parser('nap', parents=[portpid_parent],
                                       help=('make a process and its children '
                                             'pause frequently'))
    nap_action.add_argument('duration', type=int,
                            help='number of minutes to incur naps for')
    nap_action.add_argument('--nap-quantum', type=float, default=1,
                            help=('number of seconds to pause at a time; '
                                  'floating point supported'))
    nap_action.add_argument('--wake-quantum', type=float, default=0.1,
                            help=('number of seconds to remain running '
                                  'at a time; floating point supported'))

    # Self-test action
    nap_action = subparsers.add_parser('self-test',
                                       help='Do a quick self-test')

    args = parser.parse_args()

    # If a port was provided instead of a pid, canonicalize by finding
    # the pid and writing it into the args value.
    if hasattr(args, 'port') and args.port is not None:
        pid = port_to_pid(args.port)
        if pid is None:
            print('Could not resolve port {0} to a PID'
                  ' (is ratchet running with sufficient permissions?)'
                  .format(args.port))
            return 1
        else:
            args.pid = pid

    if args.action == 'wake':
        force_wake(args.pid)
    elif args.action == 'nap':
        deadline = (datetime.datetime.now() +
                    datetime.timedelta(minutes=1 * args.duration))
        nap_until(args.pid, deadline, args.nap_quantum, args.wake_quantum)
    elif args.action == 'self-test':
        self_test()
    else:
        raise AssertionError(
            "parser.parse_args should have rejected this input already")

if __name__ == '__main__':
    sys.exit(main())
